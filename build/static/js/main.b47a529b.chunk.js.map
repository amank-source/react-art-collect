{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","console","log","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","removeItem","records","setItem","stringify","fetchAllClassifications","Searchable","props","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","results","Feature","featuredResult","id","title","dated","images","primaryimageurl","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","toLowerCase","map","person","displayname","target","length","image","src","baseimageurl","alt","key","Loading","Preview","setFeaturedResult","searchResults","info","fetchPage","pageUrl","error","disabled","prev","next","record","index","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","catch","err","onSubmit","htmlFor","type","placeholder","onChange","name","classification1","century1","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b47a529b.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n *\n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nconst BASE_URL = 'https://api.harvardartmuseums.org'\nconst KEY = 'apikey=59c8889b-5ea1-4d87-9eff-efeee73e5c01'\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/object?${KEY}&${term}=${encodeURI(\n        value.split('-').join('|'),\n      )}`,\n    )\n    const data = await response.json()\n    console.log(data)\n\n    return data\n  } catch (error) {\n    throw error\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url)\n    const data = await response.json()\n    console.log(data)\n\n    return data\n  } catch (error) {\n    throw error\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n *\n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${BASE_URL}/object?${KEY}&classification=${classification}&century=${century}&keyword=${queryString}`\n\n  try {\n    const response = await fetch(url)\n    const data = await response.json()\n\n    return data\n  } catch (error) {\n    throw error\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  const url = `${BASE_URL}/century?${KEY}&size=100&sort=temporalorder`\n  if (localStorage.getItem('centuries')) {\n    try {\n      return JSON.parse(localStorage.getItem('centuries'))\n    } catch (error) {\n      localStorage.removeItem('centuries')\n    }\n  }\n\n  try {\n    const response = await fetch(url)\n    const data = await response.json()\n    const records = data.records\n\n    localStorage.setItem('centuries', JSON.stringify(records))\n\n    return records\n  } catch (error) {\n    throw error\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllClassifications() {\n  const url = `${BASE_URL}/classification?${KEY}&size=100&sort=name`\n  if (localStorage.getItem('classifications')) {\n    try {\n      return JSON.parse(localStorage.getItem('classifications'))\n    } catch (error) {\n      localStorage.removeItem('classifications')\n    }\n  }\n\n  try {\n    const response = await fetch(url)\n    const data = await response.json()\n    const records = data.records\n\n    localStorage.setItem('classifications', JSON.stringify(records))\n\n    return records\n  } catch (error) {\n    throw error\n  }\n}\n","import React, { Fragment } from 'react'\n\nimport { fetchQueryResultsFromTermAndValue } from '../api'\n\nconst Searchable = (props) => {\n  const { searchTerm, searchValue, setIsLoading, setSearchResults } = props\n  return (\n    <span className=\"content\">\n      <a\n        href=\"#\"\n        onClick={async (event) => {\n          event.preventDefault()\n          setIsLoading(true)\n          try {\n            const results = await fetchQueryResultsFromTermAndValue(\n              searchTerm,\n              searchValue,\n            )\n\n            setSearchResults(results)\n          } catch (err) {\n            console.log(err)\n          } finally {\n            setIsLoading(false)\n          }\n        }}\n      >\n        {searchValue}\n      </a>\n    </span>\n  )\n}\n\nconst Feature = (props) => {\n  const { featuredResult } = props\n  if (!featuredResult) {\n    return <main id=\"feature\" />\n  }\n\n  const {\n    title,\n    dated,\n    images,\n    primaryimageurl,\n    description,\n    culture,\n    style,\n    technique,\n    medium,\n    dimensions,\n    people,\n    department,\n    division,\n    contact,\n    creditline,\n  } = featuredResult\n\n  console.log(description, 'description')\n  console.log('featuredResult', featuredResult)\n\n  return featuredResult ? (\n    <main id=\"feature\">\n      <div className=\"object-feature\">\n        <header>\n          <h3>{title}</h3>\n          <h4>{dated}</h4>\n        </header>\n\n        <section className=\"facts\">\n          {description ? (\n            <Fragment>\n              <span className=\"title\">Description</span>\n              <span className=\"content\">\n                <a href=\"#\">{description}</a>\n              </span>\n            </Fragment>\n          ) : null}\n\n          {technique ? (\n            <Fragment>\n              <span className=\"title\">Technique:</span>\n              <Searchable\n                searchTerm=\"technique\"\n                searchValue={technique}\n                {...props}\n              />\n            </Fragment>\n          ) : null}\n\n          {medium ? (\n            <Fragment>\n              <span className=\"title\">Medium:</span>\n              <Searchable\n                searchTerm=\"medium\"\n                searchValue={medium.toLowerCase()}\n                {...props}\n              />\n            </Fragment>\n          ) : null}\n\n          {culture ? (\n            <Fragment>\n              <span className=\"title\">Culture:</span>\n              <Searchable\n                searchTerm=\"culture\"\n                searchValue={culture}\n                {...props}\n              />\n            </Fragment>\n          ) : null}\n\n          {style ? (\n            <Fragment>\n              <span className=\"title\">style:</span>\n              <span className=\"content\">{style}</span>\n            </Fragment>\n          ) : null}\n\n          {description ? (\n            <Fragment>\n              <span className=\"title\">Dimension:</span>\n              <span className=\"content\">{dimensions}</span>\n            </Fragment>\n          ) : null}\n\n          {people\n            ? people.map((person) => {\n                return (\n                  <Fragment>\n                    <span className=\"title\">People:</span>\n                    <Searchable\n                      searchTerm=\"people\"\n                      searchValue={person.displayname}\n                      {...props}\n                    />\n                  </Fragment>\n                )\n              })\n            : null}\n\n          {department ? (\n            <Fragment>\n              <span className=\"title\">Department:</span>\n              <span className=\"content\">{department}</span>\n            </Fragment>\n          ) : null}\n          {division ? (\n            <Fragment>\n              <span className=\"title\">Division:</span>\n              <span className=\"content\">{division}</span>\n            </Fragment>\n          ) : null}\n\n          {contact ? (\n            <Fragment>\n              <span className=\"title\">Contact:</span>\n              <a target=\"_blank\" href=\"mailto:${contact}\">\n                {contact}\n              </a>\n            </Fragment>\n          ) : null}\n\n          {creditline ? (\n            <Fragment>\n              <span className=\"title\">CredtLine:</span>\n              <span className=\"content\">{creditline}</span>\n            </Fragment>\n          ) : null}\n        </section>\n\n        <section className=\"photos\"></section>\n        {images && images.length > 0 ? (\n          images.map((image) => {\n            return (\n              <img\n                src={image.baseimageurl}\n                alt={image.baseimageurl}\n                key={image.baseimageurl}\n              />\n            )\n          })\n        ) : primaryimageurl ? (\n          <img src={primaryimageurl} alt={primaryimageurl} />\n        ) : null}\n      </div>\n    </main>\n  ) : (\n    ''\n  )\n}\n\nexport default Feature\n","import React from 'react'\n\nfunction Loading() {\n  return (\n    <div id=\"loading\">\n      <h2 className=\"message\">Searching...</h2>\n    </div>\n  )\n}\n\nexport default Loading\n\n/**\n * Create and export a component called Loading which uses this static HTML template:\n *\n * <div id=\"loading\">\n *   <h2 className=\"message\">Searching...</h2>\n * </div>\n */\n","import React from 'react'\n\nimport { fetchQueryResultsFromURL } from '../api'\n\nconst Preview = (props) => {\n  const { setSearchResults, setFeaturedResult, setIsLoading } = props\n  const { info, records } = props.searchResults\n\n  console.log(info, records)\n\n  async function fetchPage(pageUrl) {\n    setIsLoading(true)\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl)\n      setSearchResults(results)\n    } catch (error) {\n      console.error(error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <aside id=\"preview\">\n      <header className=\"pagination\">\n        <button\n          disabled={!info.prev}\n          className=\"previous\"\n          onClick={() => {\n            fetchPage(info.prev)\n          }}\n        >\n          Previous\n        </button>\n\n        <button\n          disabled={!info.next}\n          className=\"next\"\n          onClick={() => {\n            fetchPage(info.next)\n          }}\n        >\n          Next\n        </button>\n      </header>\n      <section className=\"results\">\n        {records.map((record, index) => {\n          return (\n            <div\n              key={index}\n              className=\"object-preview\"\n              onClick={(event) => {\n                event.preventDefault()\n                setFeaturedResult(record)\n\n                // prevent the default\n                // set the featured result to be this record, using setFeaturedResult\n              }}\n            >\n              {\n                record.primaryimageurl ? (\n                  <img src={record.primaryimageurl} alt={record.description} />\n                ) : (\n                  ''\n                )\n\n                // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing\n              }\n              {\n                record.title ? <h3>{record.title}</h3> : <h3>MISSING INFO</h3>\n                // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n              }\n            </div>\n          )\n        })}\n      </section>\n    </aside>\n  )\n}\n\nexport default Preview\n","import React, { useEffect, useState } from 'react'\n\nimport {\n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults,\n} from '../api'\n\nconst Search = (props) => {\n  const { setIsLoading, setSearchResults } = props\n  const [centuryList, setCenturyList] = useState([])\n  const [classificationList, setClassificationList] = useState([])\n  const [queryString, setQueryString] = useState('')\n  const [century, setCentury] = useState('any')\n  const [classification, setClassification] = useState('any')\n\n  useEffect(() => {\n    Promise.all([fetchAllCenturies(), fetchAllClassifications()])\n      .then((results) => {\n        setCenturyList(results[0])\n        console.log(1234)\n        setClassificationList(results[1])\n      })\n      .catch((err) => {\n        console.error(err)\n      })\n  }, [])\n\n  return (\n    <form\n      id=\"search\"\n      onSubmit={async (event) => {\n        console.log('hi')\n        event.preventDefault()\n        setIsLoading(true)\n\n        try {\n          const results = await fetchQueryResults({\n            century,\n            classification,\n            queryString,\n          })\n\n          console.log(results)\n\n          setSearchResults(results)\n        } catch (err) {\n          console.log(err)\n        } finally {\n          setIsLoading(false)\n        }\n      }}\n    >\n      <fieldset>\n        <label htmlFor=\"keywords\">Query</label>\n        <input\n          id=\"keywords\"\n          type=\"text\"\n          placeholder=\"enter keywords...\"\n          value={queryString}\n          onChange={(event) => {\n            setQueryString(event.target.value)\n          }}\n        />\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-classification\">\n          Classification\n          <span className=\"classification-count\">\n            ({classificationList.length})\n          </span>\n        </label>\n        <select\n          name=\"classification\"\n          id=\"select-classification\"\n          value={classification}\n          onChange={(event) => {\n            setClassification(event.target.value)\n          }}\n        >\n          <option value=\"any\">Any</option>\n          {classificationList.map((classification1) => {\n            return (\n              <option key={classification1.id} value={classification1.name}>\n                {classification1.name}\n              </option>\n            )\n          })}\n        </select>\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-century\">\n          Century <span className=\"century-count\">({centuryList.length})</span>\n        </label>\n        <select\n          name=\"century\"\n          id=\"select-century\"\n          value={century}\n          onChange={(event) => {\n            setCentury(event.target.value)\n          }}\n        >\n          <option value=\"any\">Any</option>\n          {centuryList.map((century1) => {\n            return (\n              <option key={century1.id} value={century1.name}>\n                {century1.name}\n              </option>\n            )\n          })}\n        </select>\n      </fieldset>\n      <button>SEARCH</button>\n    </form>\n  )\n}\n\nexport default Search\n","import React from 'react'\n\nfunction Title() {\n  return (\n    <div id=\"title\">\n      <h1>The Art Collector</h1>\n      <h5>Search the Harvard Art Museums' Private Collections</h5>\n    </div>\n  )\n}\n\nexport default Title\n","import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\n// These imports won't work until you fix ./components/index.js\nimport { Feature, Loading, Preview, Search, Title } from './components'\n\nconst App = () => {\n  const [searchResults, setSearchResults] = useState({ info: {}, records: [] })\n  const [featuredResult, setFeaturedResult] = useState(null)\n  const [isLoading, setIsLoading] = useState(false)\n\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   *\n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n\n  return (\n    <div className=\"app\">\n      {/* <Title /> is static, doesn't need any props */}\n      <Title />\n      {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n      <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n      {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n      <Preview\n        searchResults={searchResults}\n        setIsLoading={setIsLoading}\n        setSearchResults={setSearchResults}\n        setFeaturedResult={setFeaturedResult}\n      />\n      {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n      <Feature\n        featuredResult={featuredResult}\n        setIsLoading={setIsLoading}\n        setSearchResults={setSearchResults}\n      />\n      {/* <Loading /> is static, but should only render when isLoading is true */}\n      {\n        /* use a ternary and render null if isLoading is false */ isLoading ? (\n          <Loading />\n        ) : null\n      }\n    </div>\n  )\n}\nReactDOM.render(<App />, document.getElementById('app'))\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\n"],"sourceRoot":""}